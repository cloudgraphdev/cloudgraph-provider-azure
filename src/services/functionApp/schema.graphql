type azureHostingEnvironmentProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash])
}

type azureExtendedLocation {
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
}

type azureWebSiteFunction implements azureBaseResource
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  # config?: any;
  # files?: { [propertyName: string]: string };
  configHref: String @search(by: [hash, regexp])
  functionAppId: String @search(by: [hash, regexp])
  functionAppName: String @search(by: [hash, regexp])
  href: String @search(by: [hash, regexp])
  invokeUrlTemplate: String @search(by: [hash, regexp])
  isDisabled: Boolean @search
  language: String @search(by: [hash, regexp])
  location: String @search(by: [hash, regexp])
  resourceGroupId: String @search(by: [hash, regexp])
  scriptHref: String @search(by: [hash, regexp])
  scriptRootPathHref: String @search(by: [hash, regexp])
  secretsFileHref: String @search(by: [hash, regexp])
  testData: String @search(by: [hash, regexp])
  testDataHref: String @search(by: [hash, regexp])
}

type azureFunctionApp implements azureResource
  @key(fields: "id")
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  ) {
  availabilityState: String @search(by: [hash, regexp])
  clientAffinityEnabled: Boolean @search
  clientCertEnabled: Boolean @search
  clientCertExclusionPaths: String @search(by: [hash, regexp])
  clientCertMode: String @search(by: [hash, regexp])
  containerSize: Int @search
  customDomainVerificationId: String @search(by: [hash, regexp])
  dailyMemoryTimeQuota: Int @search
  defaultHostName: String @search(by: [hash, regexp])
  enabled: Boolean @search
  enabledHostNames: [String] @search(by: [hash])
  extendedLocation: azureExtendedLocation
  hostNames: [String] @search(by: [hash])
  hostNamesDisabled: Boolean @search
  hostingEnvironmentProfile: azureHostingEnvironmentProfile
  httpsOnly: Boolean @search
  hyperV: Boolean @search
  inProgressOperationId: String @search(by: [hash, regexp])
  isDefaultContainer: Boolean @search
  isXenon: Boolean @search
  keyVaultReferenceIdentity: String @search(by: [hash, regexp])
  lastModifiedTimeUtc: String @search(by: [hash, regexp])
  maxNumberOfWorkers: Int @search
  outboundIpAddresses: String @search(by: [hash, regexp])
  possibleOutboundIpAddresses: String @search(by: [hash, regexp])
  redundancyMode: String @search(by: [hash, regexp])
  repositorySiteName: String @search(by: [hash, regexp])
  reserved: Boolean @search
  scmSiteAlsoStopped: Boolean @search
  serverFarmId: String @search(by: [hash, regexp])
  state: String @search(by: [hash, regexp])
  storageAccountRequired: Boolean @search
  suspendedTill: String @search(by: [hash, regexp])
  targetSwapSlot: String @search(by: [hash, regexp])
  trafficManagerHostNames: [String] @search(by: [hash])
  usageState: String @search(by: [hash, regexp])
  virtualNetworkSubnetId: String @search(by: [hash, regexp])
  functions: [azureWebSiteFunction]
  resourceGroup: [azureResourceGroup] @hasInverse(field: functionApps)
}
