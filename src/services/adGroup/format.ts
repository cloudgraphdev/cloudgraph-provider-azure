import { generateUniqueId } from '@cloudgraph/sdk'
import { AzureAdGroup } from '../../types/generated'
import { RawAzureADGroup } from './data'

export default ({ service }: { service: RawAzureADGroup }): AzureAdGroup => {
  const {
    id,
    deletedDateTime,
    classification,
    createdDateTime,
    description,
    displayName,
    expirationDateTime,
    groupTypes = [],
    isAssignableToRole,
    mail,
    mailEnabled,
    mailNickname,
    membershipRule,
    membershipRuleProcessingState,
    onPremisesDomainName,
    onPremisesLastSyncDateTime,
    onPremisesNetBiosName,
    onPremisesSamAccountName,
    onPremisesSecurityIdentifier,
    onPremisesSyncEnabled,
    preferredDataLocation,
    preferredLanguage,
    proxyAddresses = [],
    renewedDateTime,
    securityEnabled,
    visibility,
    allowExternalSenders,
    isSubscribedByMail,
    isArchived,
    appRoleAssignments = [],
    permissionGrants = [],
    settings = [],
  } = service
  return {
    id,
    deletedDateTime,
    classification,
    createdDateTime,
    description,
    displayName,
    expirationDateTime,
    groupTypes,
    isAssignableToRole,
    mail,
    mailEnabled,
    mailNickname,
    membershipRule,
    membershipRuleProcessingState,
    onPremisesDomainName,
    onPremisesLastSyncDateTime,
    onPremisesNetBiosName,
    onPremisesSamAccountName,
    onPremisesSecurityIdentifier,
    onPremisesSyncEnabled,
    preferredDataLocation,
    preferredLanguage,
    proxyAddresses,
    renewedDateTime,
    securityEnabled,
    visibility,
    allowExternalSenders,
    isSubscribedByMail,
    isArchived,
    appRoleAssignments: appRoleAssignments.map(aRA => ({
      id: aRA.id,
      ...aRA,
    })),
    permissionGrants: permissionGrants.map(pG => ({
      id: pG.id,
      ...pG,
    })),
    settings: settings.map(({ id: sId, values: sValues = [], ...s }) => ({
      id: sId,
      values: sValues.map(sValue => ({
        id: generateUniqueId({ id, ...sValue }),
        ...sValue,
      })),
      ...s,
    })),
  }
}
