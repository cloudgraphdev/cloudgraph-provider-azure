type azureAppGatewaySubResource
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
}
type azureAppGatewayResourceSet
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  subscriptions: [String] @search(by: [hash, regexp])
}

type azureAppGatewayPrivateLinkServiceConnState
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  status: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  actionsRequired: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateLinkServiceConn
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  privateLinkServiceId: String @search(by: [hash, regexp])
  groupIds: [String] @search(by: [hash, regexp])
  requestMessage: String @search(by: [hash, regexp])
  privateLinkServiceConnectionState: azureAppGatewayPrivateLinkServiceConnState
}

type azureAppGatewayCustomDnsConfigPropertiesFormat
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  fqdn: String @search(by: [hash, regexp])
  ipAddresses: [String] @search(by: [hash, regexp])
}

type azureAppGatewayPrivateEndpointIPConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  groupId: String @search(by: [hash, regexp])
  memberName: String @search(by: [hash, regexp])
  privateIPAddress: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateEndpoint
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  extendedLocation: azureAppGatewayExtendedLocation
  subnet: azureAppGatewaySubnet
  networkInterfaces: [azureAppGatewayNetworkInterface]
  provisioningState: String @search(by: [hash, regexp])
  privateLinkServiceConn: [azureAppGatewayPrivateLinkServiceConn]
  manualPrivateLinkServiceConn: [azureAppGatewayPrivateLinkServiceConn]
  customDnsConfigs: [azureAppGatewayCustomDnsConfigPropertiesFormat]
  applicationSecurityGroups: [azureAppGatewaySecurityGroup]
  ipConfigurations: [azureAppGatewayPrivateEndpointIPConfig]
  customNetworkInterfaceName: String @search(by: [hash, regexp])
}

type azureAppGatewaySecurityGroup
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  resourceGuid: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewaySecurityRule
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  protocol: String @search(by: [hash, regexp])
  sourcePortRange: String @search(by: [hash, regexp])
  destinationPortRange: String @search(by: [hash, regexp])
  sourceAddressPrefix: String @search(by: [hash, regexp])
  sourceAddressPrefixes: [String] @search(by: [hash, regexp])
  sourceApplicationSecurityGroups: [azureAppGatewaySecurityGroup]
  destinationAddressPrefix: String @search(by: [hash, regexp])
  destinationAddressPrefixes: [String] @search(by: [hash, regexp])
  destinationAppSecurityGroups: [azureAppGatewaySecurityGroup]
  sourcePortRanges: [String] @search(by: [hash, regexp])
  destinationPortRanges: [String] @search(by: [hash, regexp])
  access: String @search(by: [hash, regexp])
  priority: Int @search
  direction: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayDnsSettings
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  dnsServers: [String] @search(by: [hash, regexp])
  appliedDnsServers: [String] @search(by: [hash, regexp])
  internalDnsNameLabel: String @search(by: [hash, regexp])
  internalFqdn: String @search(by: [hash, regexp])
  internalDomainNameSuffix: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateLinkServiceIpConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  privateIPAddress: String @search(by: [hash, regexp])
  privateIPAllocationMethod: String @search(by: [hash, regexp])
  subnet: azureAppGatewaySubnet
  primary: Boolean @search
  provisioningState: String @search(by: [hash, regexp])
  privateIPAddressVersion: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateEndpointConn
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
      id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  privateEndpoint: azureAppGatewayPrivateEndpoint
  privateLinkServiceConnectionState: azureAppGatewayPrivateLinkServiceConnState
  provisioningState: String @search(by: [hash, regexp])
  linkIdentifier: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateLinkSvc
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    extendedLocation: azureAppGatewayExtendedLocation
    loadBalancerFrontendIpConfigs: [azureAppGatewayFrontendIPConfig]
    ipConfigurations: [azureAppGatewayPrivateLinkServiceIpConfig]
    networkInterfaces: [azureAppGatewayNetworkInterface]
    provisioningState: String @search(by: [hash, regexp])
    privateEndpointConnections: [azureAppGatewayPrivateEndpointConn]
    visibility: azureAppGatewayResourceSet
    autoApproval: azureAppGatewayResourceSet
    fqdns: [String] @search(by: [hash, regexp])
    alias: String @search(by: [hash, regexp])
    enableProxyProtocol: Boolean @search
}

type azureAppGatewayNetworkInterface
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  extendedLocation: azureAppGatewayExtendedLocation
  virtualMachine: azureAppGatewaySubResource
  networkSecurityGroup: azureAppGatewayNetworkSecurityGroup
  privateEndpoint: azureAppGatewayNetworkInterface
  ipConfigurations: [azureAppGatewayNetIntfIPConfig]
  tapConfigurations: [azureAppGatewayNetworkInterfaceTapConfig]
  dnsSettings: azureAppGatewayDnsSettings
  macAddress: String @search(by: [hash, regexp])
  primary: Boolean @search
  vnetEncryptionSupported: Boolean @search
  enableAcceleratedNetworking: Boolean @search
  enableIPForwarding: Boolean @search
  hostedWorkloads: [String] @search(by: [hash, regexp])
  dscpConfiguration: azureAppGatewaySubResource
  resourceGuid: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  workloadType: String @search(by: [hash, regexp])
  nicType: String @search(by: [hash, regexp])
  privateLinkService: azureAppGatewayPrivateLinkSvc
  migrationPhase: String @search(by: [hash, regexp])
}

type azureAppGatewayRetentionPolicyParameters
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  days: Int @search
  enabled: Boolean @search
}

type azureAppGatewayFlowLogFormatParameters
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  type: String @search(by: [hash, regexp])
  version: Int @search
}

type azureAppGatewayTrafficAnalyticsProperties
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  networkWatcherFlowAnalyticsConfiguration: azureAppGatewayTrafficAnalyticsConfigProperties
}

type azureAppGatewayTrafficAnalyticsConfigProperties
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
  workspaceId: String @search(by: [hash, regexp])
  workspaceRegion: String @search(by: [hash, regexp])
  workspaceResourceId: String @search(by: [hash, regexp])
  trafficAnalyticsInterval: Int @search
}

type azureAppGatewayFlowLog
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  targetResourceId: String @search(by: [hash, regexp])
  targetResourceGuid: String @search(by: [hash, regexp])
  storageId: String @search(by: [hash, regexp])
  enabled: Boolean @search
  retentionPolicy: azureAppGatewayRetentionPolicyParameters
  format: azureAppGatewayFlowLogFormatParameters
  flowAnalyticsConfiguration: azureAppGatewayTrafficAnalyticsProperties
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayNetworkSecurityGroup
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  securityRules: [azureAppGatewaySecurityRule]
  defaultSecurityRules: [azureAppGatewaySecurityRule]
  networkInterfaces: [azureAppGatewayNetworkInterface]
  subnets: [azureAppGatewaySubnet]
  flowLogs: [azureAppGatewayFlowLog]
  resourceGuid: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayRoute
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  addressPrefix: String @search(by: [hash, regexp])
  nextHopType: String @search(by: [hash, regexp])
  nextHopIpAddress: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  hasBgpOverride: Boolean @search
}

type azureAppGatewayRouteTable
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  routes: [azureAppGatewayRoute]
  subnets: [azureAppGatewaySubnet]
  disableBgpRoutePropagation: Boolean @search
  provisioningState: String @search(by: [hash, regexp])
  resourceGuid: String @search(by: [hash, regexp])
}

type azureAppGatewayServiceEndpointPropertiesFormat
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  service: String @search(by: [hash, regexp])
  locations: [String] @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayEndpointPolicyDefinition
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  service: String @search(by: [hash, regexp])
  serviceResources: [String] @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayEndpointPolicy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  kind: String @search(by: [hash, regexp])
  serviceEndpointPolicyDef: [azureAppGatewayEndpointPolicyDefinition]
  subnets: [azureAppGatewaySubnet]
  resourceGuid: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  serviceAlias: String @search(by: [hash, regexp])
  contextualServiceEndpointPolicies: [String] @search(by: [hash, regexp])
}

type azureAppGatewayIPConfigurationProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  subnet: azureAppGatewaySubnet
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayResourceNavigationLink
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  linkedResourceType: String @search(by: [hash, regexp])
  link: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayServiceAssociationLink
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  linkedResourceType: String @search(by: [hash, regexp])
  link: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  allowDelete: Boolean @search
  locations: [String] @search(by: [hash, regexp])
}

type azureAppGatewayDelegation
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  serviceName: String @search(by: [hash, regexp])
  actions: [String] @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayApplicationGatewayIPConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  subnet: azureAppGatewaySubnet
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewaySubnet
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  addressPrefix: String @search(by: [hash, regexp])
  addressPrefixes: [String] @search(by: [hash, regexp])
  networkSecurityGroup: azureAppGatewayNetworkSecurityGroup
  routeTable: azureAppGatewayRouteTable
  natGateway: azureAppGatewaySubResource
  serviceEndpoints: [azureAppGatewayServiceEndpointPropertiesFormat]
  serviceEndpointPolicies: [azureAppGatewayEndpointPolicy]
  privateEndpoints: [azureAppGatewayPrivateEndpoint]
  ipConfigurations: [azureAppGatewayIPConfig]
  ipConfigurationProfiles: [azureAppGatewayIPConfigurationProfile]
  ipAllocations: [azureAppGatewaySubResource]
  resourceNavigationLinks: [azureAppGatewayResourceNavigationLink]
  serviceAssociationLinks: [azureAppGatewayServiceAssociationLink]
  delegations: [azureAppGatewayDelegation]
  purpose: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  privateEndpointNetworkPolicies: String @search(by: [hash, regexp])
  privateLinkServiceNetworkPolicies: String @search(by: [hash, regexp])
  applicationGatewayIpConfigurations: [azureAppGatewayApplicationGatewayIPConfig]
}

type azureAppGatewayUserAssignedIdentityAdditionalProperty
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  principalId: String @search(by: [hash, regexp])
  clientId: String @search(by: [hash, regexp])
}

type azureAppGatewayUserAssignedIdentities
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  key: String
  property: azureAppGatewayUserAssignedIdentityAdditionalProperty
}

type azureAppGatewayManagedServiceIdentity
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  principalId: String @search(by: [hash, regexp])
  tenantId: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  userAssignedIdentities: [azureAppGatewayUserAssignedIdentities]
}

type azureAppGatewayIPConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  privateIPAddress: String @search(by: [hash, regexp])
  privateIPAllocationMethod: String @search(by: [hash, regexp])
  subnet: azureAppGatewaySubnet
  publicIPAddress: azureAppGatewayPublicIPAddress
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayAuthenticationCertificate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  data: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayTrustedRootCertificate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  data: String @search(by: [hash, regexp])
  keyVaultSecretId: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayTrustedClientCertificate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  data: String @search(by: [hash, regexp])
  validatedCertData: String @search(by: [hash, regexp])
  clientCertIssuerDN: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewaySslCertificate
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  data: String @search(by: [hash, regexp])
  password: String @search(by: [hash, regexp])
  publicCertData: String @search(by: [hash, regexp])
  keyVaultSecretId: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayAppGatewayFrontendIPConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  privateIPAddress: String @search(by: [hash, regexp])
  privateIPAllocationMethod: String @search(by: [hash, regexp])
  subnetId: String @search(by: [hash, regexp])
  publicIPAddressId: String @search(by: [hash, regexp])
  privateLinkConfigurationId: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayFrontendPort
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  port: Int @search
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayProbe
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  protocol: String @search(by: [hash, regexp])
  host: String @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
  interval: Int @search
  timeout: Int @search
  unhealthyThreshold: Int @search
  pickHostNameFromBackendHttpSettings: Boolean @search
  minServers: Int @search
  matchBody: String @search(by: [hash, regexp])
  matchStatusCodes: [String] @search(by: [hash, regexp])
  port: Int @search
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayAppGatewayBackendAddressPool
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  backendIPConfigs: [azureAppGatewayNetIntfIPConfig]
  backendAddresses: [azureAppGatewayBackendAddress]
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayGatewayLoadBalancerTunnelInterface
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String! @id @search(by: [hash])
    port: Int @search
    identifier: Int @search
    protocol: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
  }

type azureAppGatewayBackendAddrPool
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    location: String @search(by: [hash, regexp])
    tunnelInterfaces: [azureAppGatewayGatewayLoadBalancerTunnelInterface]
    loadBalancerBackendAddresses: [azureAppGatewayLoadBalancerAddr]
    backendIPConfigs: [azureAppGatewayNetIntfIPConfig]
    loadBalancingRules: [String] @search(by: [hash, regexp])
    outboundRule: String @search(by: [hash, regexp])
    outboundRules: [String] @search(by: [hash, regexp])
    inboundNatRules: [String] @search(by: [hash, regexp])
    provisioningState: String @search(by: [hash, regexp])
  }

type azureAppGatewayNatRulePortMapping
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String! @id @search(by: [hash])
    inboundNatRuleName: String @search(by: [hash, regexp])
    frontendPort: Int @search
    backendPort: Int @search
  }

type azureAppGatewayLoadBalancerAddr
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String! @id @search(by: [hash])
    name: String @search(by: [hash, regexp])
    virtualNetwork: String @search(by: [hash, regexp])
    subnet: String @search(by: [hash, regexp])
    ipAddress: String @search(by: [hash, regexp])
    networkInterfaceIPConfiguration: String @search(by: [hash, regexp])
    loadBalancerFrontendIPConfiguration: String @search(by: [hash, regexp])
    inboundNatRulesPortMapping: [azureAppGatewayNatRulePortMapping]
  }

type azureAppGatewayInboundNatRule
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    frontendIPConfiguration: azureAppGatewaySubResource
    backendIPConfiguration: azureAppGatewayNetIntfIPConfig
    protocol: String @search(by: [hash, regexp])
    frontendPort: Int @search
    backendPort: Int @search
    idleTimeoutInMinutes: Int @search
    enableFloatingIP: Boolean @search
    enableTcpReset: Boolean @search
    frontendPortRangeStart: Int @search
    frontendPortRangeEnd: Int @search
    backendAddressPool: azureAppGatewaySubResource
    provisioningState: String @search(by: [hash, regexp])
  }

type azureAppGatewayPrivateLinkConnProperties
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    groupId: String @search(by: [hash, regexp])
    requiredMemberName: String @search(by: [hash, regexp])
    fqdns: [String] @search(by: [hash, regexp])
  }

type azureAppGatewayNetIntfIPConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    gatewayLoadBalancer: azureAppGatewaySubResource
    virtualNetworkTaps: [azureAppGatewayVirtualNetworkTap]
    appGatewayBackendAddrPools: [azureAppGatewayAppGatewayBackendAddressPool]
    loadBalancerBackendAddrPools: [azureAppGatewayBackendAddrPool]
    loadBalancerInboundNatRules: [azureAppGatewayInboundNatRule]
    privateIPAddress: String @search(by: [hash, regexp])
    privateIPAllocationMethod: String @search(by: [hash, regexp])
    privateIPAddressVersion: String @search(by: [hash, regexp])
    subnet: azureAppGatewaySubnet
    primary: Boolean @search
    publicIPAddress: azureAppGatewayPublicIPAddress
    applicationSecurityGroups: [azureAppGatewaySecurityGroup]
    provisioningState: String @search(by: [hash, regexp])
    privateLinkConnectionProperties: azureAppGatewayPrivateLinkConnProperties,
  }

type azureAppGatewayNetworkInterfaceTapConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    virtualNetworkTap: azureAppGatewayVirtualNetworkTap
    provisioningState: String @search(by: [hash, regexp])
  }


type azureAppGatewayFrontendIPConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    zones: [String] @search(by: [hash, regexp])
    inboundNatRuleIds: [azureAppGatewaySubResource]
    inboundNatPools: [azureAppGatewaySubResource]
    outboundRules: [azureAppGatewaySubResource]
    loadBalancingRules: [azureAppGatewaySubResource]
    privateIPAddress: String @search(by: [hash, regexp])
    privateIPAllocationMethod: String @search(by: [hash, regexp])
    privateIPAddressVersion: String @search(by: [hash, regexp])
    subnet: azureAppGatewaySubnet
    publicIPAddress: azureAppGatewayPublicIPAddress
    publicIPPrefix: azureAppGatewaySubResource
    gatewayLoadBalancer: azureAppGatewaySubResource
    provisioningState: String @search(by: [hash, regexp])
  }

type azureAppGatewayIpTag
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    ipTagType: String @search(by: [hash, regexp])
    tag: String @search(by: [hash, regexp])
  }

type azureAppGatewayExtendedLocation
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
  }

type azureAppGatewayNatGateway
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    zones: [String] @search(by: [hash, regexp])
    idleTimeoutInMinutes: Int @search
    publicIpAddresses: [azureAppGatewaySubResource]
    publicIpPrefixes: [azureAppGatewaySubResource]
    subnets: [azureAppGatewaySubResource]
    resourceGuid: String @search(by: [hash, regexp])
    provisioningState: String @search(by: [hash, regexp])
  }

type azureAppGatewayPublicIPAddress
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    extendedLocation: azureAppGatewayExtendedLocation
    zones: [String] @search(by: [hash, regexp])
    publicIPAllocationMethod: String @search(by: [hash, regexp])
    publicIPAddressVersion: String @search(by: [hash, regexp])
    ipConfiguration: azureAppGatewayIPConfig
    dnsDomainNameLabel: String @search(by: [hash, regexp])
    dnsFqdn: String @search(by: [hash, regexp])
    dnsReverseFqdn: String @search(by: [hash, regexp])
    ipTags: [azureAppGatewayIpTag]
    ipAddress: String @search(by: [hash, regexp])
    publicIPPrefix: azureAppGatewaySubResource
    idleTimeoutInMinutes: Int @search
    resourceGuid: String @search(by: [hash, regexp])
    provisioningState: String @search(by: [hash, regexp])
    servicePublicIPAddress: azureAppGatewayPublicIPAddress
    natGatewayId: String @search(by: [hash, regexp])
    natGatewayZones: [String] @search(by: [hash, regexp])
    natGateway: azureAppGatewayNatGateway
    migrationPhase: String @search(by: [hash, regexp])
    linkedPublicIPAddress: azureAppGatewayPublicIPAddress
    deleteOption: String @search(by: [hash, regexp])
  }

type azureAppGatewayVirtualNetworkTap
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    name: String @search(by: [hash, regexp])
    type: String @search(by: [hash, regexp])
    networkInterfaceTapConfigs: [azureAppGatewayNetworkInterfaceTapConfig],
    resourceGuid: String @search(by: [hash, regexp])
    destinationNetworkInterfaceIPConfiguration: azureAppGatewayNetIntfIPConfig,
    destinationLoadBalancerFrontEndIPConfiguration: azureAppGatewayFrontendIPConfig,
    destinationPort: Int @search
    provisioningState: String @search(by: [hash, regexp])
  }

type azureAppGatewayBackendAddress
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    id: String @search(by: [hash, regexp])
    fqdn: String @search(by: [hash, regexp])
    ipAddress: String @search(by: [hash, regexp])
  }

type azureAppGatewayConnectionDraining
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
  drainTimeoutInSec: Int @search
}

type azureAppGatewayBackendHttpSettings
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  port: Int @search
  protocol: String @search(by: [hash, regexp])
  cookieBasedAffinity: String @search(by: [hash, regexp])
  requestTimeout: Int @search
  probe: azureAppGatewaySubResource
  authenticationCert: [azureAppGatewaySubResource]
  trustedRootCertificates: [azureAppGatewaySubResource]
  connectionDraining: azureAppGatewayConnectionDraining
  hostName: String @search(by: [hash, regexp])
  pickHostNameFromBackendAddress: Boolean @search
  affinityCookieName: String @search(by: [hash, regexp])
  probeEnabled: Boolean @search
  path: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayCustomError
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  statusCode: String @search(by: [hash, regexp])
  customErrorPageUrl: String @search(by: [hash, regexp])
}

type azureAppGatewayHttpListener
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  frontendIPConfiguration: azureAppGatewaySubResource
  frontendPort: azureAppGatewaySubResource
  protocol: String @search(by: [hash, regexp])
  hostName: String @search(by: [hash, regexp])
  sslCertificate: azureAppGatewaySubResource
  sslProfile: azureAppGatewaySubResource
  requireServerNameIndication: Boolean @search
  provisioningState: String @search(by: [hash, regexp])
  customErrorConfigurations: [azureAppGatewayCustomError]
  firewallPolicy: azureAppGatewaySubResource
  hostNames: [String] @search(by: [hash, regexp])
}

type azureAppGatewaySslPolicy
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  disabledSslProtocols: [String] @search(by: [hash, regexp])
  policyType: String @search(by: [hash, regexp])
  policyName: String @search(by: [hash, regexp])
  cipherSuites: [String] @search(by: [hash, regexp])
  minProtocolVersion: String @search(by: [hash, regexp])
}

type azureAppGatewaySslProfile
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  trustedClientCertificates: [azureAppGatewaySubResource]
  sslPolicy: azureAppGatewaySslPolicy
  clientAuthConfiguration: Boolean @search
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayApplicationGatewayPathRule
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  paths: [String] @search(by: [hash, regexp])
  backendAddressPool: azureAppGatewaySubResource
  backendHttpSettings: azureAppGatewaySubResource
  redirectConfiguration: azureAppGatewaySubResource
  rewriteRuleSet: azureAppGatewaySubResource
  loadDistributionPolicy: azureAppGatewaySubResource
  provisioningState: String @search(by: [hash, regexp])
  firewallPolicy: azureAppGatewaySubResource
}

type azureAppGatewayUrlPathMap
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  defaultBackendAddressPool: azureAppGatewaySubResource
  defaultBackendHttpSettings: azureAppGatewaySubResource
  defaultRewriteRuleSet: azureAppGatewaySubResource
  defaultRedirectConfiguration: azureAppGatewaySubResource
  defaultLoadDistributionPolicy: azureAppGatewaySubResource
  pathRules: [azureAppGatewayApplicationGatewayPathRule]
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayRequestRoutingRule
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  ruleType: String @search(by: [hash, regexp])
  priority: Int @search
  backendAddressPool: azureAppGatewaySubResource
  backendHttpSettings: azureAppGatewaySubResource
  httpListener: azureAppGatewaySubResource
  urlPathMap: azureAppGatewaySubResource
  rewriteRuleSet: azureAppGatewaySubResource
  redirectConfiguration: azureAppGatewaySubResource
  loadDistributionPolicy: azureAppGatewaySubResource
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayRewriteRuleSet
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  rewriteRules: [azureAppGatewayRequestRoutingRule]
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayRedirectConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  redirectType: String @search(by: [hash, regexp])
  targetListener: azureAppGatewaySubResource
  targetUrl: String @search(by: [hash, regexp])
  includePath: Boolean @search
  includeQueryString: Boolean @search
  requestRoutingRules: [azureAppGatewaySubResource]
  urlPathMaps: [azureAppGatewaySubResource]
  pathRules: [azureAppGatewaySubResource]
}
type azureAppGatewayFirewallDisabledRuleGroup
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  ruleGroupName: String @search(by: [hash, regexp])
  rules: [Int] @search
}

type azureAppGatewayApplicationGatewayFirewallExclusion
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  matchVariable: String @search(by: [hash, regexp])
  selectorMatchOperator: String @search(by: [hash, regexp])
  selector: String @search(by: [hash, regexp])
}

type azureAppGatewayWebAppFirewallConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
  firewallMode: String @search(by: [hash, regexp])
  ruleSetType: String @search(by: [hash, regexp])
  ruleSetVersion: String @search(by: [hash, regexp])
  disabledRuleGroups: [azureAppGatewayFirewallDisabledRuleGroup]
  requestBodyCheck: Boolean @search
  maxRequestBodySize: Int @search
  maxRequestBodySizeInKb: Int @search
  fileUploadLimitInMb: Int @search
  exclusions: [azureAppGatewayApplicationGatewayFirewallExclusion]
}


type azureAppGatewayAutoscaleConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  minCapacity: Int @search
  maxCapacity: Int @search
}

type azureAppGatewayPrivateLinkIpConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  privateIPAddress: String @search(by: [hash, regexp])
  privateIPAllocationMethod: String @search(by: [hash, regexp])
  subnet: azureAppGatewaySubResource
  primary: Boolean @search
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayPrivateLinkConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  ipConfigurations: [azureAppGatewayPrivateLinkIpConfig]
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayLoadDistributionTarget
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  weightPerServer: Int @search
  backendAddressPool: azureAppGatewaySubResource
}

type azureAppGatewayLoadDistribPolicy
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  loadDistributionTargets: [azureAppGatewayLoadDistributionTarget]
  loadDistributionAlgorithm: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
}

type azureAppGatewayGlobalConfig
  @generate(
    query: { get: false, query: false, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enableRequestBuffering: Boolean @search
  enableResponseBuffering: Boolean @search
}

type azureAppGateway implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  zones: [String] @search(by: [hash, regexp])
  identity: azureAppGatewayManagedServiceIdentity
  sslPolicy: azureAppGatewaySslPolicy
  operationalState: String @search(by: [hash, regexp])
  gatewayIPConfigurations: [azureAppGatewayIPConfig]
  authenticationCert: [azureAppGatewayAuthenticationCertificate]
  trustedRootCertificates: [azureAppGatewayTrustedRootCertificate]
  trustedClientCertificates: [azureAppGatewayTrustedClientCertificate]
  sslCertificates: [azureAppGatewaySslCertificate]
  frontendIPConfigurations: [azureAppGatewayAppGatewayFrontendIPConfig]
  frontendPorts: [azureAppGatewayFrontendPort]
  probes: [azureAppGatewayProbe]
  backendAddressPools: [azureAppGatewayAppGatewayBackendAddressPool]
  backendHttpSettingsCollection: [azureAppGatewayBackendHttpSettings]
  httpListeners: [azureAppGatewayHttpListener]
  sslProfiles: [azureAppGatewaySslProfile]
  urlPathMaps: [azureAppGatewayUrlPathMap]
  requestRoutingRules: [azureAppGatewayRequestRoutingRule]
  rewriteRuleSets: [azureAppGatewayRewriteRuleSet]
  redirectConfigurations: [azureAppGatewayRedirectConfig]
  webApplicationFirewallConfiguration: azureAppGatewayWebAppFirewallConfig
  firewallPolicy: azureAppGatewaySubResource
  enableHttp2: Boolean @search
  enableFips: Boolean @search
  autoscaleConfiguration: azureAppGatewayAutoscaleConfig
  privateLinkConfigurations: [azureAppGatewayPrivateLinkConfig]
  privateEndpointConnections: [azureAppGatewayPrivateEndpointConn]
  resourceGuid: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  customErrorConfigurations: [azureAppGatewayCustomError]
  forceFirewallPolicyAssociation: Boolean @search
  loadDistributionPolicies: [azureAppGatewayLoadDistribPolicy]
  globalConfiguration: azureAppGatewayGlobalConfig
}
