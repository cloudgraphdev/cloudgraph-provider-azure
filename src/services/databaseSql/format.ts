import cuid from 'cuid'
import { AzureDatabaseSql } from '../../types/generated'
import { formatTagsFromMap } from '../../utils/format'
import { RawAzureDatabaseSql } from './data'

export default ({
  service,
  account,
  region,
}: {
  service: RawAzureDatabaseSql
  account: string
  region: string
}): AzureDatabaseSql => {
  const {
    id,
    name,
    type,
    kind,
    resourceGroup,
    managedBy,
    sku,
    identity,
    createMode,
    collation,
    maxSizeBytes,
    sampleName,
    elasticPoolId,
    sourceDatabaseId,
    status,
    databaseId,
    creationDate,
    currentServiceObjectiveName,
    requestedServiceObjectiveName,
    defaultSecondaryLocation,
    failoverGroupId,
    restorePointInTime,
    sourceDatabaseDeletionDate,
    recoveryServicesRecoveryPointId,
    longTermRetentionBackupResourceId,
    recoverableDatabaseId,
    restorableDroppedDatabaseId,
    catalogCollation,
    zoneRedundant,
    licenseType,
    maxLogSizeBytes,
    earliestRestoreDate,
    readScale,
    highAvailabilityReplicaCount,
    secondaryType,
    currentSku,
    autoPauseDelay,
    currentBackupStorageRedundancy,
    requestedBackupStorageRedundancy,
    minCapacity,
    pausedDate,
    resumedDate,
    maintenanceConfigurationId,
    isLedgerOn,
    isInfraEncryptionEnabled,
    federatedClientId,
    primaryDelegatedIdentityClientId,
    Tags,
  } = service

  return {
    id: id || cuid(),
    name,
    region,
    subscriptionId: account,
    type,
    kind,
    resourceGroup,
    managedBy,
    sku,
    identity: {
      ...identity,
      userAssignedIdentities: Object.keys(identity?.userAssignedIdentities ?? {}).map(key => ({
        id: cuid(),
        key,
        value: identity?.userAssignedIdentities[key],
      })),
      delegatedResources: Object.keys(identity?.delegatedResources ?? {}).map(key => ({
        id: cuid(),
        key,
        value: identity?.delegatedResources[key],
      })),
    },
    createMode,
    collation,
    maxSizeBytes: maxSizeBytes?.toString(),
    sampleName,
    elasticPoolId,
    sourceDatabaseId,
    status,
    databaseId,
    creationDate: creationDate?.toISOString(),
    currentServiceObjectiveName,
    requestedServiceObjectiveName,
    defaultSecondaryLocation,
    failoverGroupId,
    restorePointInTime: restorePointInTime?.toISOString(),
    sourceDatabaseDeletionDate: sourceDatabaseDeletionDate?.toISOString(),
    recoveryServicesRecoveryPointId,
    longTermRetentionBackupResourceId,
    recoverableDatabaseId,
    restorableDroppedDatabaseId,
    catalogCollation,
    zoneRedundant,
    licenseType,
    maxLogSizeBytes,
    earliestRestoreDate: earliestRestoreDate?.toISOString(),
    readScale,
    highAvailabilityReplicaCount,
    secondaryType,
    currentSku,
    autoPauseDelay,
    currentBackupStorageRedundancy,
    requestedBackupStorageRedundancy,
    minCapacity,
    pausedDate: pausedDate?.toISOString(),
    resumedDate: resumedDate?.toISOString(),
    maintenanceConfigurationId,
    isLedgerOn,
    isInfraEncryptionEnabled,
    federatedClientId,
    primaryDelegatedIdentityClientId,
    tags: formatTagsFromMap(Tags),
  }
}
