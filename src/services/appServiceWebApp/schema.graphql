type azureAppServiceWebAppHostNameSslState
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  sslState: String @search(by: [hash, regexp])
  ipBasedSslResult: String @search(by: [hash, regexp])
  ipBasedSslState: String @search(by: [hash, regexp])
  virtualIP: String @search(by: [hash, regexp])
  thumbprint: String @search(by: [hash, regexp])
  toUpdate: Boolean @search
  toUpdateIpBasedSsl: Boolean @search
  hostType: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigAppSettings
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  value: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigDatabaseConnectionInfo
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  connectionString: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigVirtualDirectory
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  virtualPath: String @search(by: [hash, regexp])
  physicalPath: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigVirtualApp
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  virtualPath: String @search(by: [hash, regexp])
  physicalPath: String @search(by: [hash, regexp])
  preloadEnabled: Boolean @search
  virtualDirectories: [azureAppServiceWebAppSiteConfigVirtualDirectory]
}

type azureAppServiceWebAppSiteConfigLimits
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  maxPercentageCpu: Int @search
  maxMemoryInMb: Int @search
  maxDiskSizeInMb: Int @search
}

type azureAppServiceWebAppSiteConfigCorsSettings
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  allowedOrigins: [String] @search(by: [hash, regexp])
  supportCredentials: Boolean @search
}

type azureAppServiceWebAppSiteConfigRampUpRule
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  actionHostName: String @search(by: [hash, regexp])
  reroutePercentage: Int @search
  changeStep: Int @search
  changeIntervalInMinutes: Int @search
  minReroutePercentage: Int @search
  maxReroutePercentage: Int @search
  changeDecisionCallbackUrl: String @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigExperiments {
  rampUpRules: [azureAppServiceWebAppSiteConfigRampUpRule]
}

type azureAppServiceWebAppSiteConfigHeaders
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  key: String @search(by: [hash, regexp])
  value: [String] @search(by: [hash])
}

type azureAppServiceWebAppSiteConfigIpSecurityRestriction
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  ipAddress: String @search(by: [hash, regexp])
  subnetMask: String @search(by: [hash, regexp])
  vnetSubnetResourceId: String @search(by: [hash, regexp])
  vnetTrafficTag: Int @search
  subnetTrafficTag: Int @search
  action: String @search(by: [hash, regexp])
  tag: String @search
  priority: Int @search
  name: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  headers: [azureAppServiceWebAppSiteConfigHeaders]
}

type azureAppServiceWebAppSiteConfigAzureStorageInfoValue
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  accountName: String @search(by: [hash, regexp])
  shareName: String @search(by: [hash, regexp])
  accessKey: String @search(by: [hash, regexp])
  mountPath: String @search(by: [hash, regexp])
  state: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigARequestsBasedTrigger
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  count: Int @search
  timeInterval: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigStatusCodesBasedTrigger
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  status: Int @search
  subStatus: Int @search
  win32Status: Int @search
  count: Int @search
  timeInterval: String @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigSlowRequestsBasedTrigger
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  timeTaken: String @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
  count: Int @search
  timeInterval: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigSlowRequestsBasedTriggers
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  timeTaken: String @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
  count: Int @search
  timeInterval: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigStatusCodes
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  statusCodes: String @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
  count: Int @search
  timeInterval: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigTriggers
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  requests: azureAppServiceWebAppSiteConfigARequestsBasedTrigger
  privateBytesInKB: Int64 @search
  statusCodes: [azureAppServiceWebAppSiteConfigStatusCodesBasedTrigger]
  slowRequests: azureAppServiceWebAppSiteConfigSlowRequestsBasedTrigger
  slowRequestsWithPath: [azureAppServiceWebAppSiteConfigSlowRequestsBasedTriggers]
  statusCodesRange: [azureAppServiceWebAppSiteConfigStatusCodes]
}

type azureAppServiceWebAppSiteConfigAutoHealCustomAction
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  exe: String @search(by: [hash, regexp])
  parameters: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigAutoHealActions
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  actionType: String @search(by: [hash, regexp])
  customAction: azureAppServiceWebAppSiteConfigAutoHealCustomAction
  minProcessExecutionTime: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfigAutoHealRules
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  triggers: azureAppServiceWebAppSiteConfigTriggers
  actions: azureAppServiceWebAppSiteConfigAutoHealActions
}

type azureAppServiceWebAppSiteConfigHandlerMapping
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  extension: String @search(by: [hash, regexp])
  scriptProcessor: String @search(by: [hash, regexp])
  arguments: String @search(by: [hash, regexp])
}

type azureAppServiceWebAppSiteConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  numberOfWorkers: Int @search
  defaultDocuments: [String] @search(by: [hash, regexp])
  netFrameworkVersion: String @search(by: [hash, regexp])
  phpVersion: String @search(by: [hash, regexp])
  pythonVersion: String @search(by: [hash, regexp])
  nodeVersion: String @search(by: [hash, regexp])
  powerShellVersion: String @search(by: [hash, regexp])
  linuxFxVersion: String @search(by: [hash, regexp])
  windowsFxVersion: String @search(by: [hash, regexp])
  requestTracingEnabled: Boolean @search
  requestTracingExpirationTime: String @search(by: [hash, regexp])
  remoteDebuggingEnabled: Boolean @search
  remoteDebuggingVersion: String @search(by: [hash, regexp])
  httpLoggingEnabled: Boolean @search
  acrUseManagedIdentityCreds: Boolean @search
  acrUserManagedIdentityID: String @search(by: [hash, regexp])
  logsDirectorySizeLimit: Int @search
  detailedErrorLoggingEnabled: Boolean @search
  publishingUsername: String @search(by: [hash, regexp])
  appSettings: [azureAppServiceWebAppSiteConfigAppSettings]
  autoHealRules: azureAppServiceWebAppSiteConfigAutoHealRules
  connectionStrings: [azureAppServiceWebAppSiteConfigDatabaseConnectionInfo]
  handlerMappings: [azureAppServiceWebAppSiteConfigHandlerMapping]
  documentRoot: String @search(by: [hash, regexp])
  scmType: String @search(by: [hash, regexp])
  use32BitWorkerProcess: Boolean @search
  webSocketsEnabled: Boolean @search
  alwaysOn: Boolean @search
  javaVersion: String @search(by: [hash, regexp])
  javaContainer: String @search(by: [hash, regexp])
  javaContainerVersion: String @search(by: [hash, regexp])
  appCommandLine: String @search(by: [hash, regexp])
  managedPipelineMode: String @search(by: [hash, regexp])
  virtualApplications: [azureAppServiceWebAppSiteConfigVirtualApp]
  loadBalancing: String @search(by: [hash, regexp])
  experiments: azureAppServiceWebAppSiteConfigExperiments
  limits: azureAppServiceWebAppSiteConfigLimits
  autoHealEnabled: Boolean @search
  tracingOptions: String @search(by: [hash, regexp])
  vnetName: String @search(by: [hash, regexp])
  vnetRouteAllEnabled: Boolean @search
  vnetPrivatePortsCount: Int @search
  cors: azureAppServiceWebAppSiteConfigCorsSettings
  isPushEnabled: Boolean @search
  apiDefinitionInfoUrl: String @search(by: [hash, regexp])
  apiManagementConfigId: String @search(by: [hash, regexp])
  autoSwapSlotName: String @search(by: [hash, regexp])
  localMySqlEnabled: Boolean @search
  managedServiceIdentityId: Int @search
  xManagedServiceIdentityId: Int @search
  keyVaultReferenceIdentity: String @search(by: [hash, regexp])
  ipSecurityRestrictions: [azureAppServiceWebAppSiteConfigIpSecurityRestriction]
  scmIpSecurityRestrictions: [azureAppServiceWebAppSiteConfigIpSecurityRestriction]
  scmIpSecurityRestrictionsUseMain: Boolean @search
  http20Enabled: Boolean @search
  http20ProxyFlag: String @search(by: [hash, regexp])
  minTlsVersion: String @search(by: [hash, regexp])
  scmMinTlsVersion: String @search(by: [hash, regexp])
  ftpsState: String @search(by: [hash, regexp])
  preWarmedInstanceCount: Int @search
  functionAppScaleLimit: Int @search
  healthCheckPath: String @search(by: [hash, regexp])
  functionsRuntimeScaleMonitoringEnabled: Boolean @search
  websiteTimeZone: String @search(by: [hash, regexp])
  minimumElasticInstanceCount: Int @search
  azureStorageAccounts: [azureAppServiceWebAppSiteConfigAzureStorageInfoValue]
  publicNetworkAccess: String @search(by: [hash, regexp])
  location: String @search(by: [hash, regexp])
  tags: [azureRawTag]
}

type azureAppServiceWebApp implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  state: String @search(by: [hash, regexp])
  hostNames: [String] @search(by: [hash, regexp])
  repositorySiteName: String @search(by: [hash, regexp])
  usageState: String @search(by: [hash, regexp])
  enabled: Boolean @search
  enabledHostNames: [String] @search(by: [hash, regexp])
  availabilityState: String @search(by: [hash, regexp])
  hostNameSslStates: [azureAppServiceWebAppHostNameSslState]
  serverFarmId: String @search(by: [hash, regexp])
  reserved: Boolean @search
  isXenon: Boolean @search
  hyperV: Boolean @search
  lastModifiedTimeUtc: String @search(by: [hash, regexp])
  siteConfig: azureAppServiceWebAppSiteConfig
  trafficManagerHostNames: [String] @search(by: [hash, regexp])
  scmSiteAlsoStopped: Boolean @search
  targetSwapSlot: String @search(by: [hash, regexp])
  hostingEnvironmentProfile: azureOptionalResource
  clientAffinityEnabled: Boolean @search
  clientCertEnabled: Boolean @search
  clientCertMode: String @search(by: [hash, regexp])
  clientCertExclusionPaths: String @search(by: [hash, regexp])
  hostNamesDisabled: Boolean @search
  customDomainVerificationId: String @search(by: [hash, regexp])
  outboundIpAddresses: String @search(by: [hash, regexp])
  possibleOutboundIpAddresses: String @search(by: [hash, regexp])
  containerSize: Int @search
  dailyMemoryTimeQuota: Int @search
  suspendedTill: String @search(by: [hash, regexp])
  maxNumberOfWorkers: Int @search
  resourceGroupId: String @search(by: [hash, regexp])
  isDefaultContainer: Boolean @search
  defaultHostName: String @search(by: [hash, regexp])
  httpsOnly: Boolean @search
  redundancyMode: String @search(by: [hash, regexp])
  inProgressOperationId: String @search(by: [hash, regexp])
  storageAccountRequired: Boolean @search
  keyVaultReferenceIdentity: String @search(by: [hash, regexp])
  virtualNetworkSubnetId: String @search(by: [hash, regexp])
  authEnabled: Boolean @search
  appServicePlan: [azureAppServicePlan] @hasInverse(field: appServiceWebApps)
  resourceGroup: [azureResourceGroup] @hasInverse(field: appServiceWebApps)
  storageAccounts: [azureStorageAccount] @hasInverse(field: appServiceWebApp)
}
