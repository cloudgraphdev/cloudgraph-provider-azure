type azureVmScaleSetSubResource
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
}

type azureVmScaleSetExtension
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  forceUpdateTag: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  typeHandlerVersion: String @search(by: [hash, regexp])
  typePropertiesType: String @search(by: [hash, regexp])
  publisher: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  provisionAfterExtensions: [String] @search(by: [hash, regexp])
  autoUpgradeMinorVersion: Boolean @search
  enableAutomaticUpgrade: Boolean @search
  settings: String @search(by: [hash, regexp])
}

type azureVmScaleSetExtensionProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  extensions: [azureVmScaleSetExtension]
}

type azureVmScaleSetDiagnosticsProfileBoot
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
}

type azureVmScaleSetDiagnosticsProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  bootDiagnostics: azureVmScaleSetDiagnosticsProfileBoot
}

type azureVmScaleSetDnsSettings
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  dnsServers: [String] @search(by: [hash, regexp])
}

type azureVmScaleSetIpTag
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  ipTagType: String @search(by: [hash, regexp])
  tag: String @search(by: [hash, regexp])
}

type azureVmScaleSetPublicIPAddressConfigurationDnsSettings
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  domainNameLabel: String @search(by: [hash, regexp])
}

type azureVmScaleSetNetworkPublicIpAddresssConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  name: String @search(by: [hash, regexp])
  idleTimeoutInMinutes: Int @search
  ipTags: [azureVmScaleSetIpTag]
  publicIPPrefix: azureSubResource
  publicIPAddressVersion: String @search(by: [hash, regexp])
  deleteOption: String @search(by: [hash, regexp])
  dnsSettings: azureVmScaleSetPublicIPAddressConfigurationDnsSettings
}

type azureVmScaleSetNetworkIpConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  privateIPAddressVersion: String @search(by: [hash, regexp])
  primary: Boolean @search
  subnetId: String @search(by: [hash, regexp])
  appGatewayAddressPools: [azureSubResource]
  applicationSecurityGroups: [azureSubResource]
  loadBalancerAddressPools: [azureSubResource]
  loadBalancerInboundNatPools: [azureSubResource]
}

type azureVmScaleSetNetworkProfileConfig
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  primary: Boolean @search
  enableAcceleratedNetworking: Boolean @search
  enableFpga: Boolean @search
  enableIPForwarding: Boolean @search
  deleteOption: String @search(by: [hash, regexp])
  networkSecurityGroup: azureSubResource
  dnsSettings: azureVmScaleSetDnsSettings
  ipConfigurations: [azureVmScaleSetNetworkIpConfig]
}

type azureVmScaleSetNetworkProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  networkInterfaceConfigurations: [azureVmScaleSetNetworkProfileConfig]
}

type azureVmScaleSetStorageProfileImageReference
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String @search(by: [hash, regexp])
  publisher: String @search(by: [hash, regexp])
  offer: String @search(by: [hash, regexp])
  sku: String @search(by: [hash, regexp])
  version: String @search(by: [hash, regexp])
}

type azureVmScaleSetStorageProfileManagedDisk
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  storageAccountType: String @search(by: [hash, regexp])
}

type azureVmScaleSetStorageProfileOsDisk
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  caching: String @search(by: [hash, regexp])
  createOption: String @search(by: [hash, regexp])
  osType: String @search(by: [hash, regexp])
  diskSizeGB: Int @search
  writeAcceleratorEnabled: Boolean @search
  managedDisk: azureVmScaleSetStorageProfileManagedDisk
}

type azureVmScaleSetStorageProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  imageReference: azureVmScaleSetStorageProfileImageReference
  osDisk: azureVmScaleSetStorageProfileOsDisk
}

type azureSshPublicKey
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  path: String @search(by: [hash, regexp])
  keyData: String @search(by: [hash, regexp])
}

type azureSshConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  publicKeys: [azureSshPublicKey]
}

type azureVmScaleSetOsProfileLinuxConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  disablePasswordAuthentication: Boolean @search
  provisionVMAgent: Boolean @search
  ssh: azureSshConfiguration
}

type azureVmScaleSetOsProfileWindowsConfiguration
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  provisionVMAgent: Boolean @search
  enableAutomaticUpdates: Boolean @search
  timeZone: String @search(by: [hash, regexp])
  ssh: azureSshConfiguration
}

type azureVaultCertificate
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  certificateUrl: String @search(by: [hash, regexp])
  certificateStore: String @search(by: [hash, regexp])
}

type azureVaultSecretGroup
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash, regexp])
  sourceVault: azureSubResource
  vaultCertificates: [azureVaultCertificate]
}

type azureVmScaleSetOsProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  computerNamePrefix: String @search(by: [hash, regexp])
  adminUsername: String @search(by: [hash, regexp])
  allowExtensionOperations: Boolean @search
  linuxConfiguration: azureVmScaleSetOsProfileLinuxConfiguration
  windowsConfiguration: azureVmScaleSetOsProfileWindowsConfiguration
  secrets: [azureVaultSecretGroup]
}

type azureVmScaleSetProfile
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  osProfile: azureVmScaleSetOsProfile
  storageProfile: azureVmScaleSetStorageProfile
  networkProfile: azureVmScaleSetNetworkProfile
  diagnosticsProfile: azureVmScaleSetDiagnosticsProfile
  extensionProfile: azureVmScaleSetExtensionProfile
}

type azureVmScaleSetScaleInPolicy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  rules: [String] @search(by: [hash, regexp])
}

type azureVmScaleSet implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  provisioningState: String @search(by: [hash, regexp])
  overprovision: Boolean @search
  doNotRunExtensionsOnOverprovisionedVMs: Boolean @search
  singlePlacementGroup: Boolean @search
  platformFaultDomainCount: Int @search
  uniqueId: String @search(by: [hash, regexp])
  virtualMachineProfile: azureVmScaleSetProfile
  scaleInPolicy: azureVmScaleSetScaleInPolicy
  resourceGroup: [azureResourceGroup]
    @hasInverse(field: virtualMachineScaleSets)
  virtualMachines: [azureVirtualMachine]
    @hasInverse(field: virtualMachineScaleSets)
  aksManagedClusters: [azureAksManagedCluster]
    @hasInverse(field: virtualMachineScaleSets)
}
