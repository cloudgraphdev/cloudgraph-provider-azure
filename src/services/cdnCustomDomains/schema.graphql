type azureCdnCertificateSourceParameters {
  odataType: String @search(by: [hash, regexp])
  certificateType: String @search(by: [hash, regexp])
  subscriptionId: String @search(by: [hash, regexp])
  resourceGroupName: String @search(by: [hash, regexp])
  vaultName: String @search(by: [hash, regexp])
  secretName: String @search(by: [hash, regexp])
  secretVersion: String @search(by: [hash, regexp])
  updateRule: String @search(by: [hash, regexp])
  deleteRule: String @search(by: [hash, regexp])
}

type azureCdnCustomDomainHttpsParametersUnion {
  certificateSource: String @search(by: [hash, regexp])
  protocolType: String @search(by: [hash, regexp])
  minimumTlsVersion: String @search(by: [hash, regexp])
  certificateSourceParameters: azureCdnCertificateSourceParameters
}

type azureCdnCustomDomain implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  createdBy: String @search(by: [hash, regexp])
  createdByType: String @search(by: [hash, regexp])
  createdAt: String @search(by: [hash, regexp])
  lastModifiedBy: String @search(by: [hash, regexp])
  lastModifiedByType: String @search(by: [hash, regexp])
  lastModifiedAt: String @search(by: [hash, regexp])
  hostName: String @search(by: [hash, regexp])
  resourceState: String @search(by: [hash, regexp])
  customHttpsProvisioningState: String @search(by: [hash, regexp])
  customHttpsProvisioningSubstate: String @search(by: [hash, regexp])
  validationData: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  customHttpsParameters: azureCdnCustomDomainHttpsParametersUnion
  resourceGroups: [azureResourceGroup] @hasInverse(field: cdnCustomDomains) # convert to singular resourceGroup
  cdnEndpoints: [azureCdnEndpoint] @hasInverse(field: cdnCustomDomains)
}
