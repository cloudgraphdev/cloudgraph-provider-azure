type azureCdnHealthProbeParameters
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  probePath: String @search(by: [hash, regexp])
  probeRequestType: String @search(by: [hash, regexp])
  probeProtocol: String @search(by: [hash, regexp])
  probeIntervalInSeconds: Int @search
}

type azureCdnHttpErrorRangeParameters
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash, regexp])
  begin: Int @search
  end: Int @search
}

type azureCdnResponseOriginErrorDetection
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  responseBasedDetectedErrorTypes: String @search(by: [hash, regexp])
  responseBasedFailoverThresholdPercentage: Int @search
  httpErrorRanges: [azureCdnHttpErrorRangeParameters]
}

type azureCdnOriginGroup implements azureBaseResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  subscriptionId: String @search(by: [hash, regexp])
  region: String @search(by: [hash, regexp])
  resourceGroupId: String @search(by: [hash, regexp])
  createdBy: String @search(by: [hash, regexp])
  createdByType: String @search(by: [hash, regexp])
  createdAt: String @search(by: [hash, regexp])
  lastModifiedBy: String @search(by: [hash, regexp])
  lastModifiedByType: String @search(by: [hash, regexp])
  lastModifiedAt: String @search(by: [hash, regexp])
  healthProbeSettings: azureCdnHealthProbeParameters
  trafficRestorationTimeToHealedOrNewEndpointsInMinutes: Int @search
  responseBasedOriginErrorDetectionSettings: azureCdnResponseOriginErrorDetection
  resourceState: String @search(by: [hash, regexp])
  provisioningState: String @search(by: [hash, regexp])
  resourceGroup: [azureResourceGroup] @hasInverse(field: cdnOriginGroups)
  cdnEndpoints: [azureCdnEndpoint] @hasInverse(field: cdnOriginGroups)
  cdnOrigins: [azureCdnOrigin] @hasInverse(field: cdnOriginGroups)
}
