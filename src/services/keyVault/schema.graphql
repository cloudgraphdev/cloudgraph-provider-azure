type azureKeyVaultKeyAttributes
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  enabled: Boolean @search
  notBefore: String @search(by: [hash, regexp])
  expires: String @search(by: [hash, regexp])
  created: String @search(by: [hash, regexp])
  updated: String @search(by: [hash, regexp])
  recoveryLevel: String @search(by: [hash, regexp])
  exportable: Boolean @search
}

type azureKeyVaultKey
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  location: String @search(by: [hash, regexp])
  keyUri: String @search(by: [hash, regexp])
  attributes: azureKeyVaultKeyAttributes
  tags: [azureRawTag]
}

type azureKeyVaultSecretAttributes
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  enabled: Boolean @search
  notBefore: String @search(by: [hash, regexp])
  expires: String @search(by: [hash, regexp])
  created: String @search(by: [hash, regexp])
  updated: String @search(by: [hash, regexp])
}

type azureKeyVaultSecretProperties
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  value: String @search(by: [hash, regexp])
  contentType: String @search(by: [hash, regexp])
  attributes: azureKeyVaultSecretAttributes
  secretUri: String @search(by: [hash, regexp])
  secretUriWithVersion: String @search(by: [hash, regexp])
}

type azureKeyVaultSecret
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
  ) {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  location: String @search(by: [hash, regexp])
  tags: [azureRawTag]
  properties: azureKeyVaultSecretProperties
}

type azureKeyVaultAccessPolicy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  objectId: String @search(by: [hash, regexp])
  applicationId: String @search(by: [hash, regexp])
  permissionKeys: [String] @search(by: [hash, regexp])
  permissionSecrets: [String] @search(by: [hash, regexp])
  permissionCertificates: [String] @search(by: [hash, regexp])
  permissionStorage: [String] @search(by: [hash, regexp])
}

type azureKeyVaultDiagnosticSetting
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  storageAccountId: String @search(by: [hash, regexp])
  serviceBusRuleId: String @search(by: [hash, regexp])
  eventHubAuthorizationRuleId: String @search(by: [hash, regexp])
  eventHubName: String @search(by: [hash, regexp])
  metrics: [azureDiagnosticSettingMetricSettings]
  logs: [azureDiagnosticSettingLogs]
  workspaceId: String @search(by: [hash, regexp])
  logAnalyticsDestinationType: String @search(by: [hash, regexp])
}

type azureKeyVault implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
    subscription: false
  )
  @key(fields: "id") {
    tenantId: String @search(by: [hash, regexp])
    accessPolicies: [azureKeyVaultAccessPolicy]
    vaultUri: String @search(by: [hash, regexp])
    enabledForDeployment: Boolean @search
    enabledForDiskEncryption: Boolean @search
    enabledForTemplateDeployment: Boolean @search
    enableSoftDelete: Boolean @search
    createMode: String @search(by: [hash, regexp])
    enablePurgeProtection: Boolean @search
    networkAclBypass: String @search(by: [hash, regexp])
    networkAclDefaultAction: String @search(by: [hash, regexp])
    networkAclIpRules: [String] @search(by: [hash, regexp])
    networkAclVirtualNetworkRules: [String] @search(by: [hash, regexp])
    softDeleteRetentionInDays: Int @search
    enableRbacAuthorization: Boolean @search
    provisioningState: String @search(by: [hash, regexp])
    publicNetworkAccess: String @search(by: [hash, regexp])
    keys: [azureKeyVaultKey]
    secrets: [azureKeyVaultSecret]
    diagnosticSettings: [azureKeyVaultDiagnosticSetting]
    resourceGroup: [azureResourceGroup] @hasInverse (field: keyVaults)
    containerRegistries: [azureContainerRegistry] @hasInverse(field: keyVault)
}
