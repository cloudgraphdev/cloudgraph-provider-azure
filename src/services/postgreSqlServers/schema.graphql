type azurePostgreSqlServer implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  identity: azurePostgreSqlServerResourceIdentity
  administratorLogin: String @search(by: [hash, regexp])
  version: String @search(by: [hash, regexp])
  sslEnforcement: String @search(by: [hash, regexp])
  minimalTlsVersion: String @search(by: [hash, regexp])
  byokEnforcement: String @search(by: [hash, regexp])
  infrastructureEncryption: String @search(by: [hash, regexp])
  userVisibleState: String @search(by: [hash, regexp])
  fullyQualifiedDomainName: String @search(by: [hash, regexp])
  earliestRestoreDate: String @search(by: [hash, regexp])
  storageProfile: azurePostgreSqlServerStorageProfile
  replicationRole: String @search(by: [hash, regexp])
  masterServerId: String @search(by: [hash, regexp])
  replicaCapacity: Int @search
  publicNetworkAccess: String @search(by: [hash, regexp])
  privateEndpointConnections: [azurePostgreSqlServerPrivateEndpointConnection]
  databasePostgreSql: [azureDatabasePostgreSql] @hasInverse(field: postgreSqlServer)
  resourceGroup: [azureResourceGroup] @hasInverse(field: postgreSqlServer)
}

type azurePostgreSqlServerResourceIdentity
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  principalId: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  tenantId: String @search(by: [hash, regexp])
}

type azurePostgreSqlServerStorageProfile
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  ) {
  backupRetentionDays: Int @search
  geoRedundantBackup: String @search(by: [hash, regexp])
  storageMB: Int @search
  storageAutogrow: String @search(by: [hash, regexp])
}

type azurePostgreSqlServerPrivateEndpointConnection
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  properties: azurePostgreSqlServerServerPrivateEndpointConnectionProperties
}

type azurePostgreSqlServerServerPrivateEndpointConnectionProperties
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  ) {
  privateEndpoint: azurePostgreSqlServerPrivateEndpointProperty
  privateLinkServiceConnectionState: azurePostgreSqlServerPrivateLinkServiceConnectionStateProperty
  provisioningState: String @search(by: [hash, regexp])
}

type azurePostgreSqlServerPrivateEndpointProperty
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  ) {
  id: String @search(by: [hash, regexp])
}

type azurePostgreSqlServerPrivateLinkServiceConnectionStateProperty
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  ) {
  status: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  actionsRequired: String @search(by: [hash, regexp])
}