type azureSqlServerUserIdentity
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  principalId: String @search(by: [hash, regexp])
  clientId: String @search(by: [hash, regexp])
}

type azureSqlServerUserAssignedIdentity
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id
  key: String @search(by: [hash, regexp])
  value: azureSqlServerUserIdentity
}

type azureSqlServerIdentity
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  principalId: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  tenantId: String @search(by: [hash, regexp])
  userAssignedIdentities: [azureSqlServerUserAssignedIdentity]
}

type azureSqlServerPrivateLinkServiceConnectionStateProperty
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  status: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  actionsRequired: String @search(by: [hash, regexp])
}

type azureSqlServerPrivateEndpointConnectionProperties
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  privateEndpointId: String @search(by: [hash, regexp])
  privateLinkServiceConnectionState: azureSqlServerPrivateLinkServiceConnectionStateProperty
  provisioningState: String @search(by: [hash, regexp])
}

type azureSqlServerPrivateEndpointConnection
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  properties: azureSqlServerPrivateEndpointConnectionProperties
}

type azureSqlServerExternalAdministrator
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  administratorType: String @search(by: [hash, regexp])
  principalType: String @search(by: [hash, regexp])
  login: String @search(by: [hash, regexp])
  sid: String @search(by: [hash, regexp])
  tenantId: String @search(by: [hash, regexp])
  azureADOnlyAuthentication: Boolean @search
}

type azureSqlServerFirewallRule
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  startIpAddress: String @search(by: [hash, regexp])
  endIpAddress: String @search(by: [hash, regexp])
}

type azureSqlServerSecurityAlertPolicy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  state: String @search(by: [hash, regexp])
  disabledAlerts: [String] @search(by: [hash, regexp])
  emailAddresses: [String] @search(by: [hash, regexp])
  emailAccountAdmins: Boolean @search
  storageEndpoint: String @search(by: [hash, regexp])
  storageAccountAccessKey: String @search(by: [hash, regexp])
  retentionDays: Int @search
  creationTime: String @search(by: [hash, regexp])
}

type azureSqlServerADAdministrator
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  administratorType: String @search(by: [hash, regexp])
  login: String @search(by: [hash, regexp])
  sid: String @search(by: [hash, regexp])
  tenantId: String @search(by: [hash, regexp])
}

type azureSqlServerEncryptionProtector
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])
  kind: String @search(by: [hash, regexp])
  location: String @search(by: [hash, regexp])
  subregion: String @search(by: [hash, regexp])
  serverKeyName: String @search(by: [hash, regexp])
  serverKeyType: String @search(by: [hash, regexp])
  uri: String @search(by: [hash, regexp])
  thumbprint: String @search(by: [hash, regexp])
  autoRotationEnabled: Boolean @search
}

type azureSqlServer implements azureResource
  @generate(
    query: { get: true, query: true, aggregate: true }
    mutation: { add: true, delete: false }
  )
  @key(fields: "id") {
  identity: azureSqlServerIdentity
  administratorLogin: String @search(by: [hash, regexp])
  administratorLoginPassword: String @search(by: [hash, regexp])
  version: String @search(by: [hash, regexp])
  state: String @search(by: [hash, regexp])
  fullyQualifiedDomainName: String @search(by: [hash, regexp])
  privateEndpointConnections: [azureSqlServerPrivateEndpointConnection]
  minimalTlsVersion: String @search(by: [hash, regexp])
  publicNetworkAccess: String @search(by: [hash, regexp])
  primaryUserAssignedIdentityId: String @search(by: [hash, regexp])
  federatedClientId: String @search(by: [hash, regexp])
  keyId: String @search(by: [hash, regexp])
  administrators: azureSqlServerExternalAdministrator
  workspaceFeature: String @search(by: [hash, regexp])
  restrictOutboundNetworkAccess: String @search(by: [hash, regexp])
  firewallRules: [azureSqlServerFirewallRule]
  serverSecurityAlertPolicies: [azureSqlServerSecurityAlertPolicy]
  adAdministrators: [azureSqlServerADAdministrator]
  encryptionProtectors: [azureSqlServerEncryptionProtector]
  vulnerabilityAssessments: [azureSqlServerVulnerabilityAssessment]
  resourceGroup: [azureResourceGroup] @hasInverse(field: sqlServers)
  databaseSql: [azureDatabaseSql] @hasInverse(field: sqlServers)
}

type azureSqlServerVulnerabilityAssessment
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  )
  @key(fields: "id") {
  id: String! @id @search(by: [hash])
  name: String @search(by: [hash, regexp])
  type: String @search(by: [hash, regexp])      
  storageContainerPath: String @search(by: [hash, regexp])
  storageContainerSasKey: String @search(by: [hash, regexp])
  storageAccountAccessKey: String @search(by: [hash, regexp])
  recurringScans: azureSqlServerVulnerabilityAssessmentRecurringScansProperties
}

type azureSqlServerVulnerabilityAssessmentRecurringScansProperties
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  isEnabled: Boolean @search
  emailSubscriptionAdmins: Boolean @search
  emails: [String] @search(by: [hash, regexp])
}
